- hosts: localhost
  gather_facts: false

  tasks:
    - name: Load variables
      ansible.builtin.include_vars: vars.yaml

    - name: Create OpenStack networks
      openstack.cloud.network:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ instance_name }}-{{ item.name }}-net"
      loop: "{{ all_networks }}"

    - name: Create OpenStack subnets
      openstack.cloud.subnet:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ instance_name }}-{{ item.name }}-subnet"
        network_name: "{{ instance_name }}-{{ item.name }}-net"
        cidr: "{{ item.cidr }}"
        enable_dhcp: yes
        dns_nameservers: "{{ item.dns_nameservers | default([]) }}"
        gateway_ip: "{{ item.cidr | ansible.utils.nthhost(1) }}"
      loop: "{{ all_networks }}"

    - name: Create the OpenStack external router
      openstack.cloud.router:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-external-router"
        network: "{{ external_network }}"
        interfaces:
          - "{{ instance_name }}-{{ spine.name }}-subnet"

    - name: Create VM ports on the spine network
      openstack.cloud.port:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ item.name }}-spine-port"
        network: "{{ instance_name }}-{{ spine.name }}-net"
        fixed_ips:
          - ip_address: "{{ item.spine_ip }}"
        port_security_enabled: false
      loop: "{{ all_networks }}"
      register: spine_ports_result

    - name: Create map of network name to spine port uuid
      set_fact:
        spine_ports: '{{ dict(spine_ports_result.results | map("json_query", "[item.name, id]") | list) }}'

    - name: Create VM ports on leaf networks
      openstack.cloud.port:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ item.name }}-leaf-port"
        network: "{{ instance_name }}-{{ item.name }}-net"
        fixed_ips:
          - ip_address: "{{ item.cidr | ansible.utils.nthhost(1) }}"
        port_security_enabled: false
      loop: "{{ leaves }}"
      register: leaf_ports_result

    - name: Create map of network name to leaf port uuid
      set_fact:
        leaf_ports: '{{ dict(leaf_ports_result.results | map("json_query", "[item.name, id]") | list) }}'

    - name: Create the spine gateway VM
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ spine.name }}-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ [ { 'port-id': spine_ports['spine'] } ] }}" # Spine was the first VM port we created
        auto_ip: false
        security_groups: []
        timeout: 600
      async: 600
      poll: 0
      register: spine_vm_create

    - name: Create the leaf gateway VMs
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ item.name }}-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ [ {'port-id': spine_ports[item.name] },
                    {'port-id': leaf_ports[item.name] } ] }}"
        auto_ip: false
        security_groups: []
        timeout: 600
      loop: "{{ leaves }}"
      async: 600
      poll: 0
      register: leaf_vm_create

    - name: Wait for spine gateway VM creation
      async_status:
        jid: "{{ spine_vm_create.ansible_job_id }}"
      register: spine_vm_create_result
      until: spine_vm_create_result.finished
      retries: 60
      delay: 10

    - name: Check for existing floating IP
      set_fact:
        # List network addresses for the spine network
        # Filter network addresses to only those containing OS-EXT-IPS:type==`floating`
        # Take the first filtered address (floating IP)
        # Return the addr field
        # Return the empty string if the above returns no results
        spine_fip: "{{ (spine_vm_create_result.openstack.addresses[network] |
                        community.general.json_query('[? \"OS-EXT-IPS:type\"==`floating` ]') |
                        first
                       ).addr | default('') }}"
      vars:
        network: "{{ instance_name }}-{{ spine.name }}-net"

    - block:
      - name: Create floating IP for spine gateway VM
        openstack.cloud.floating_ip:
          cloud: "{{ cloud_name }}"
          network: "{{ external_network }}"
          server: "{{ spine_vm.name }}"

      # Honestly, I'm not kidding, openstack.cloud.floating_ip does not return
      # the FIP it created. Seriously.
      # floating_ip_info does not permit fetching floating ip by server
      # So we fetch the server again

      - name: Re-fetch server to determine floating IP
        openstack.cloud.server_info:
          cloud: "{{ cloud_name }}"
          server: "{{ spine_vm.id }}"
        register: spine_vm_fetch

      - name: Check for existing floating IP
        set_fact:
          # List network addresses for the spine network
          # Filter network addresses to only those containing OS-EXT-IPS:type==`floating`
          # Take the first filtered address (floating IP)
          # Return the addr field
          spine_fip: "{{ (spine_vm_fetch.openstack_servers[0].addresses[network] |
                          community.general.json_query('[? \"OS-EXT-IPS:type\"==`floating` ]') |
                          first
                         ).addr }}"
        vars:
          network: "{{ instance_name }}-{{ spine.name }}-net"

      vars:
        spine_vm: "{{ spine_vm_create_result.openstack }}"
      when: spine_fip == ""

    - name: Wait for leaf gateway VMs creation
      async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      loop: "{{ leaf_vm_create.results }}"
      loop_control:
        loop_var: async_result_item
      register: leaf_vm_create_result
      until: leaf_vm_create_result.finished
      retries: 60
      delay: 10

    - debug:
        msg: "Log into spine gateway VM on {{ spine_fip }}"
