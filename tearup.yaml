- hosts: localhost
  gather_facts: false
  vars:
    port_struct_query: "{id: port.id,
                         mac_address: port.mac_address,
                         ip_address: port.fixed_ips[0].ip_address,
                         subnet: port.fixed_ips[0].subnet_id}"
    port_struct_map_query: "[item.key, {{ port_struct_query }}]"

  tasks:
    - name: Load variables
      ansible.builtin.include_vars: vars.yaml

    - block:
      - name: Create security group for the spine gateway
        openstack.cloud.security_group:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-spine-sg"
        register: security_group_result

      - name: Cache security group
        set_fact:
          security_group: '{{ security_group_result.id }}'
          cacheable: true
      when: security_group is not defined

    - block:
      - name: Create security group rule to allow SSH
        openstack.cloud.security_group_rule:
          cloud: "{{ cloud_name }}"
          security_group: "{{ security_group }}"
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        register: security_group_rule_ssh_result

      - name: Cache security group rule
        set_fact:
          security_group_ssh_rule: '{{ security_group_rule_ssh_result.id }}'
          cacheable: true
      when: security_group_ssh_rule is not defined

    # N.B. For reasons I don't understand the ICMP rule is not idempotent. If
    # you delete the fact cache and re-run the playbook this will fail with
    # SecurityGroupRuleExists. The SSH rule above doesn't seem to have the same
    # problem. The error message will contain the id of the existing rule, but
    # unfortunately not in a machine parseable format. The workaround is to
    # delete it and re-run the playbook.
    - block:
      - name: Create security group rule to allow ICMP
        openstack.cloud.security_group_rule:
          cloud: "{{ cloud_name }}"
          security_group: "{{ security_group }}"
          protocol: icmp
        register: security_group_rule_icmp_result

      - name: Cache security group rule
        set_fact:
          security_group_icmp_rule: '{{ security_group_rule_icmp_result.id }}'
          cacheable: true
      when: security_group_icmp_rule is not defined

    - block:
      - name: Create external port for spine gateway VM
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-spine-external"
          network: "{{ external_network }}"
          security_groups:
            - "{{ security_group }}"
        register: spine_external_port_result

      - name: Cache spine external port info
        set_fact:
          spine_external_port: "{{ spine_external_port_result | json_query(port_struct_query) }}"
          cacheable: true
      when: spine_external_port is not defined

    - block:
      - name: Get external subnet info
        openstack.cloud.subnets_info:
          cloud: "{{ cloud_name }}"
          filters:
            id: "{{ spine_external_port.subnet }}"
        register: external_subnet_result

      - name: Cache external subnet info
        set_fact:
          external_subnet: "{{ external_subnet_result.openstack_subnets[0] }}"
          cacheable: true
      when: external_subnet is not defined

    - block:
      - name: Create patch networks
        openstack.cloud.network:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item }}-patch"
        loop: "{{ leaves.keys() | list }}"
        register: patch_networks_result

      - name: Cache patch networks
        set_fact:
          patch_networks: '{{ dict(patch_networks_result.results | map("json_query", "[item, id]") | list) }}'
          cacheable: true
      when: patch_networks is not defined

    - block:
      - name: Create patch subnets
        openstack.cloud.subnet:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.key }}-patch"
          network_name: "{{ patch_networks[item.key] }}"
          cidr: "{{ item.value.patch_cidr }}"
          enable_dhcp: no
        loop: "{{ leaves | dict2items }}"
        register: patch_subnets_result

      - name: Cache patch subnets
        set_fact:
          patch_subnets: '{{ dict(patch_subnets_result.results | map("json_query", "[item.key, id]") | list) }}'
          cacheable: true
      when: patch_subnets is not defined

    - block:
      - name: Create spine ports for ToR patches
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.key }}-spine-patch"
          network: "{{ patch_networks[item.key] }}"
          fixed_ips:
            - ip_address: "{{ item.value.patch_cidr | ansible.utils.nthhost(1) }}"
          port_security_enabled: false
        loop: "{{ leaves | dict2items }}"
        register: spine_patch_ports_result

      - name: Cache spine patch ports
        set_fact:
          spine_patch_ports: "{{ dict(spine_patch_ports_result.results | map('json_query', port_struct_map_query) | list) }}"
          cacheable: true
      when: spine_patch_ports is not defined

    - block:
      - name: Create leaf ports for ToR patches
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.key }}-leaf-patch"
          network: "{{ patch_networks[item.key] }}"
          fixed_ips:
            - ip_address: "{{ item.value.patch_cidr | ansible.utils.nthhost(2) }}"
          port_security_enabled: false
        loop: "{{ leaves | dict2items }}"
        register: leaf_patch_ports_result

      - name: Cache leaf patch ports
        set_fact:
          leaf_patch_ports: "{{ dict(leaf_patch_ports_result.results | map('json_query', port_struct_map_query) | list) }}"
          cacheable: true
      when: leaf_patch_ports is not defined

    - block:
      - name: Create leaf networks
        openstack.cloud.network:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item }}-leaf"
        loop: "{{ leaves.keys() | list }}"
        register: leaf_networks_result

      - name: Cache leaf networks
        set_fact:
          leaf_networks: '{{ dict(leaf_networks_result.results | map("json_query", "[item, id]") | list) }}'
          cacheable: true
      when: leaf_networks is not defined

    - block:
      - name: Create leaf subnets
        openstack.cloud.subnet:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.key }}-subnet"
          network_name: "{{ leaf_networks[item.key] }}"
          cidr: "{{ item.value.cidr }}"
          enable_dhcp: yes
          dns_nameservers: "{{ external_subnet.dns_nameservers }}"
          gateway_ip: "{{ item.value.cidr | ansible.utils.nthhost(1) }}"
          allocation_pool_start: "{{ item.value.cidr | ansible.utils.nthhost(10) }}"
          allocation_pool_end: "{{ item.value.cidr | ansible.utils.nthhost(-2) }}"
        loop: "{{ leaves | dict2items }}"
        register: leaf_subnets_result

      - name: Cache leaf subnets
        set_fact:
          leaf_subnets: '{{ dict(leaf_subnets_result.results | map("json_query", "[item.key, id]") | list) }}'
          cacheable: true
      when: leaf_subnets is not defined

    - block:
      - name: Create VM ports on leaf networks
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.key }}-leaf-port"
          network: "{{ leaf_networks[item.key] }}"
          fixed_ips:
            - ip_address: "{{ item.value.cidr | ansible.utils.nthhost(1) }}"
          port_security_enabled: false
        loop: "{{ leaves | dict2items }}"
        register: leaf_ports_result

      - name: Cache leaf ports
        set_fact:
          leaf_ports: "{{ dict(leaf_ports_result.results | map('json_query', port_struct_map_query) | list) }}"
          cacheable: true
      when: leaf_ports is not defined

    - name: Construct netplan config for spine patch nics
      set_fact:
        spine_patch_nics: "{{ spine_patch_nics | default({}) | combine({item.key: spine_patch_nic}) }}"
      vars:
        spine_patch_nic:
          match:
            macaddress: "{{ item.value.mac_address }}"
          addresses:
          - "{{ item.value.ip_address }}/{{ leaves[item.key].patch_cidr | ansible.utils.ipaddr('prefix') }}"
          dhcp4: false
      loop: "{{ spine_patch_ports | dict2items }}"

    - name: Construct network cloud-init for spine gateway VM
      set_fact:
        spine_netconfig:
          network:
            version: 2
            ethernets: "{{ { 'external': external } | combine(spine_patch_nics) }}"
      vars:
        external:
          external:
            match:
              macaddress: "{{ spine_external_port.mac_address }}"
            addresses:
            - "{{ spine_external_port.ip_address }}/{{ external_subnet.cidr | ansible.utils.ipaddr('prefix') }}"
            gateway4: "{{ external_subnet.gateway_ip }}"
            dhcp4: false
            nameservers:
              addresses: "{{ external_subnet.dns_nameservers }}"

    - name: Construct network cloud-init for leaf gateway VMs
      set_fact:
        leaf_netconfigs: "{{ (leaf_netconfigs | default({})) | combine({item: netconfig}) }}"
      vars:
        netconfig:
            network:
              version: 2
              ethernets:
                spine:
                  match:
                    macaddress: "{{ leaf_patch_ports[item].mac_address }}"
                  addresses:
                  - "{{ leaf_patch_ports[item].ip_address }}/{{ leaves[item].patch_cidr | ansible.utils.ipaddr('prefix') }}"
                  gateway4: "{{ spine_patch_ports[item].ip_address }}"
                  nameservers:
                    addresses: "{{ external_subnet.dns_nameservers }}"
                  dhcp4: false
      loop: "{{ leaves.keys() | list }}"

    - name: Create the spine gateway VM
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-spine-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ spine_gateway_nics }}"
        auto_ip: false
        security_groups: []
        userdata: |
          #cloud-config
          {{ userdata | to_yaml }}
        config_drive: yes
        timeout: 600
      async: 600
      poll: 0
      register: spine_vm_create
      when: spine_vm is not defined
      vars:
        spine_gateway_nics: "{{ ([ spine_external_port ] + (spine_patch_ports.values() | list)) |
                                map('json_query', '{\"port-id\": id}') | list }}"
        userdata:
          network: "{{ spine_netconfig }}"

    - name: Create the leaf gateway VMs
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ item }}-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ [ {'port-id': leaf_patch_ports[item].id },
                    {'port-id': leaf_ports[item].id } ] }}"
        auto_ip: false
        security_groups: []
        userdata: |
          #cloud-config
          {{ userdata | to_yaml }}
        config_drive: yes
        timeout: 600
      loop: "{{ leaves.keys() | list }}"
      async: 600
      poll: 0
      register: leaf_vm_create
      when: leaf_vms is not defined
      vars:
        userdata:
          network: "{{ leaf_netconfigs[item] }}"

    - block:
      - name: Wait for spine gateway VM creation
        async_status:
          jid: "{{ spine_vm_create.ansible_job_id }}"
        register: spine_vm_create_result
        until: spine_vm_create_result.finished
        retries: 60
        delay: 10

      - name: Cache spine gateway VM
        set_fact:
          spine_vm: "{{ spine_vm_create_result.openstack }}"
          cacheable: true
      when: spine_vm is not defined

    - block:
      - name: Wait for leaf gateway VMs creation
        async_status:
          jid: "{{ async_result_item.ansible_job_id }}"
        loop: "{{ leaf_vm_create.results }}"
        loop_control:
          loop_var: async_result_item
        register: leaf_vm_create_result
        until: leaf_vm_create_result.finished
        retries: 60
        delay: 10

      - name: Cache leaf gateway VMs
        set_fact:
          leaf_vms: '{{ dict(leaf_vm_create_result.results | map("json_query", "[async_result_item.item.name, openstack]") | list) }}'
          cacheable: true
      when: leaf_vms is not defined

    - name: Add spine gateway VM host
      add_host:
        name: spine
        ansible_host: "{{ spine_external_port.ip_address }}"
        ansible_user: cloud-user
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        groups:
        - gateways

    - name: Add leaf gateway VM hosts
      add_host:
        name: "{{ item.key }}"
        ansible_host: "{{ leaf_patch_ports[item.key].ip_address }}"
        ansible_user: cloud-user
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p cloud-user@{{ spine_external_port.ip_address }}"'
        groups:
        - gateways
        - leaves
      loop: "{{ leaves | dict2items }}"

    - debug:
        msg: "Log into spine gateway VM on {{ spine_external_port.ip_address }}"

- hosts: gateways
  gather_facts: false

  tasks:
    - name: Wait for the host to be up and ssh available
      wait_for_connection:
        delay: 20
        timeout: 300

- hosts: spine
  gather_facts: true
  become: true

  tasks:
    - name: Disable the default routes that we don't want from cloud-init
      ignore_errors: true
      shell: |
        #!/bin/bash
        for i in /etc/sysconfig/network-scripts/ifcfg-eth*; do
          if ! egrep -q "BOOTPROTO=dhcp" $i; then
            if ! egrep -q "DEFROUTE=no" $i; then
              sed -i 's,^\(DEFROUTE[ ]*=\).*,\1'no',g' $i
              rc=1
            else
              echo "DEFROUTE=no">>$i
              rc=1
            fi
          fi
        done
        exit $rc
      register: disable_routes

    - name: Reboot the machine if default routes have changed
      ansible.builtin.reboot:
      when: disable_routes.rc == 1

    - name: Install IPtables
      ansible.builtin.package:
        name: iptables
        state: present

    - name: Configure SNAT on the spine
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        jump: SNAT
        to_source: "{{ ansible_facts.default_ipv4.address }}"

    - name: Persist SNAT rule
      community.general.iptables_state:
        state: saved
        path: /etc/sysconfig/iptables

    - name: Install iptables-services
      ansible.builtin.package:
        name: iptables-services
        state: present

    - name: enable and start IPtables
      become: true
      ansible.builtin.service:
        name: iptables
        enabled: yes
        state: restarted

    - name: set IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/90-network.conf
        state: present
        reload: yes

- hosts: leaves
  gather_facts: false
  become: true

  tasks:
    # Leaf networks have DHCP enabled so we need to disable their default route
    # since we can't use cloud-init to manually configure the interface.
    - name: Disable the default routes that we don't want from cloud-init
      ignore_errors: true
      shell: |
        #!/bin/bash
        for i in /etc/sysconfig/network-scripts/ifcfg-eth*; do
          if egrep -q "BOOTPROTO=dhcp" $i; then
            if ! egrep -q "DEFROUTE=no" $i; then
              sed -i 's,^\(DEFROUTE[ ]*=\).*,\1'no',g' $i
              rc=1
            else
              echo "DEFROUTE=no">>$i
              rc=1
            fi
          fi
        done
        exit $rc
      register: disable_routes

    - name: Reboot the machine if default routes have changed
      ansible.builtin.reboot:
      when: disable_routes.rc == 1

- hosts: gateways
  gather_facts: true
  strategy: free
  become: true

  tasks:
    - name: Load variables
      ansible.builtin.include_vars: vars.yaml

    - name: set IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/90-network.conf
        state: present
        reload: yes

    - name: set IPv6 forwarding
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: '1'
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/90-network.conf
        state: present
        reload: yes

    - name: disable reverse path forwarding validation
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: '2'
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/90-network.conf
        state: present
        reload: yes

    - name: Install frr
      ansible.builtin.package:
        name: frr
        state: present

    - name: enable FRR BGP daemon
      ansible.builtin.lineinfile:
        path: /etc/frr/daemons
        regexp: "^bgpd="
        line: "bgpd=yes"
        owner: frr
        group: frr
        mode: '640'

    - name: enable FRR BFD daemon
      ansible.builtin.lineinfile:
        path: /etc/frr/daemons
        regexp: "^bfdd="
        line: "bfdd=yes"
        owner: frr
        group: frr
        mode: '640'

- hosts: spine
  gather_facts: true
  become: true

  tasks:
    - name: configure FRR
      ansible.builtin.template:
        src: ./templates/frr-spine.conf.j2
        dest: /etc/frr/frr.conf
        owner: frr
        group: frr
        mode: '640'

    - name: enable and start FRR
      become: true
      ansible.builtin.service:
        name: frr
        enabled: yes
        state: restarted

- hosts: leaves
  gather_facts: true
  become: true

  tasks:
    - name: configure FRR
      ansible.builtin.template:
        src: ./templates/frr-leaf.conf.j2
        dest: /etc/frr/frr.conf
        owner: frr
        group: frr
        mode: '640'

    - name: enable and start FRR
      become: true
      ansible.builtin.service:
        name: frr
        enabled: yes
        state: restarted
