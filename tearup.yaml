- hosts: localhost
  gather_facts: false

  tasks:
    - name: Load variables
      ansible.builtin.include_vars: vars.yaml

    - block:
      - name: Create leaf networks
        openstack.cloud.network:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.name }}-leaf"
        loop: "{{ leaves }}"
        register: leaf_networks_result

      - name: Cache leaf networks
        set_fact:
          leaf_networks: '{{ dict(leaf_networks_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: leaf_networks is not defined

    - block:
      - name: Create leaf subnets
        openstack.cloud.subnet:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.name }}-subnet"
          network_name: "{{ leaf_networks[item.name] }}"
          cidr: "{{ item.cidr }}"
          enable_dhcp: yes
          dns_nameservers: "{{ dns_nameservers }}"
          gateway_ip: "{{ item.cidr | ansible.utils.nthhost(1) }}"
        loop: "{{ leaves }}"
        register: leaf_subnets_result

      - name: Cache leaf subnets
        set_fact:
          leaf_subnets: '{{ dict(leaf_subnets_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: leaf_subnets is not defined

    - block:
      - name: Create patch networks
        openstack.cloud.network:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.name }}-patch"
        loop: "{{ leaves }}"
        register: patch_networks_result

      - name: Cache patch networks
        set_fact:
          patch_networks: '{{ dict(patch_networks_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: patch_networks is not defined

    - block:
      - name: Create patch subnets
        openstack.cloud.subnet:
          cloud: "{{ cloud_name }}"
          state: present
          name: "{{ instance_name }}-{{ item.name }}-patch"
          network_name: "{{ patch_networks[item.name] }}"
          cidr: "{{ item.patch_cidr }}"
          enable_dhcp: yes
        loop: "{{ leaves }}"
        register: patch_subnets_result

      - name: Cache leaf subnets
        set_fact:
          patch_subnets: '{{ dict(patch_subnets_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: patch_subnets is not defined

    - block:
      - name: Create spine ports for ToR patches
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.name }}-spine-patch"
          network: "{{ patch_networks[item.name] }}"
          fixed_ips:
            - ip_address: "{{ item.patch_cidr | ansible.utils.nthhost(3) }}"
          port_security_enabled: false
        loop: "{{ leaves }}"
        register: spine_patch_ports_result

      - name: Cache spine patch ports
        set_fact:
          spine_patch_ports: '{{ dict(spine_patch_ports_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: spine_patch_ports is not defined

    - block:
      - name: Create leaf ports for ToR patches
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.name }}-leaf-patch"
          network: "{{ patch_networks[item.name] }}"
          fixed_ips:
            - ip_address: "{{ item.patch_cidr | ansible.utils.nthhost(4) }}"
          port_security_enabled: false
        loop: "{{ leaves }}"
        register: leaf_patch_ports_result

      - name: Cache leaf patch ports
        set_fact:
          leaf_patch_ports: '{{ dict(leaf_patch_ports_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: leaf_patch_ports is not defined

    - block:
      - name: Create VM ports on leaf networks
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-{{ item.name }}-leaf-port"
          network: "{{ leaf_networks[item.name] }}"
          fixed_ips:
            - ip_address: "{{ item.cidr | ansible.utils.nthhost(1) }}"
          port_security_enabled: false
        loop: "{{ leaves }}"
        register: leaf_ports_result

      - name: Cache leaf ports
        set_fact:
          leaf_ports: '{{ dict(leaf_ports_result.results | map("json_query", "[item.name, id]") | list) }}'
          cacheable: true
      when: leaf_ports is not defined

    - block:
      - name: Create external port for spine gateway VM
        openstack.cloud.port:
          cloud: "{{ cloud_name }}"
          name: "{{ instance_name }}-spine-external"
          network: "{{ external_network }}"
        register: spine_external_port_result

      - name: Cache spine external port info
        set_fact:
          spine_external_port:
            id: "{{ spine_external_port_result.id }}"
            address: "{{ spine_external_port_result.port.fixed_ips[0].ip_address }}"
          cacheable: true
      when: spine_external_port is not defined

    - name: Create the spine gateway VM
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ spine.name }}-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ spine_gateway_nics }}"
        auto_ip: false
        security_groups: []
        timeout: 600
      async: 600
      poll: 0
      register: spine_vm_create
      when: spine_vm is not defined
      vars:
        spine_gateway_nics: "{{ [ { 'port-id': spine_external_port.id } ] +
                                (leaves | map(attribute='name') | map('extract', spine_patch_ports) |
                                          map('json_query', '{\"port-id\": @}') | list) }}"

    - name: Create the leaf gateway VMs
      openstack.cloud.server:
        cloud: "{{ cloud_name }}"
        name: "{{ instance_name }}-{{ item.name }}-gateway"
        image: "{{ image }}"
        key_name: "{{ keypair | mandatory }}"
        flavor: "{{ flavor }}"
        nics: "{{ [ {'port-id': leaf_patch_ports[item.name] },
                    {'port-id': leaf_ports[item.name] } ] }}"
        auto_ip: false
        security_groups: []
        timeout: 600
      loop: "{{ leaves }}"
      async: 600
      poll: 0
      register: leaf_vm_create
      when: leaf_vms is not defined

    - block:
      - name: Wait for spine gateway VM creation
        async_status:
          jid: "{{ spine_vm_create.ansible_job_id }}"
        register: spine_vm_create_result
        until: spine_vm_create_result.finished
        retries: 60
        delay: 10

      - name: Cache spine gateway VM
        set_fact:
          spine_vm: "{{ spine_vm_create_result.openstack }}"
          cacheable: true
      when: spine_vm is not defined

    - block:
      - name: Wait for leaf gateway VMs creation
        async_status:
          jid: "{{ async_result_item.ansible_job_id }}"
        loop: "{{ leaf_vm_create.results }}"
        loop_control:
          loop_var: async_result_item
        register: leaf_vm_create_result
        until: leaf_vm_create_result.finished
        retries: 60
        delay: 10

      - name: Cache leaf gateway VMs
        set_fact:
          leaf_vms: '{{ dict(leaf_vm_create_result.results | map("json_query", "[async_result_item.item.name, openstack]") | list) }}'
          cacheable: true
      when: leaf_vms is not defined

    - name: Add spine gateway VM host
      add_host:
        name: spine
        ansible_host: "{{ spine_external_port.address }}"
        ansible_user: cloud-user
        groups:
        - gateways

    - name: Add leaf gateway VM hosts
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.patch_cidr | ansible.utils.nthhost(4) }}"
        ansible_user: cloud-user
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p cloud-user@{{ spine_external_port.address }}"'
        groups:
        - gateways
        - leaves
      loop: "{{ leaves }}"

    - debug:
        msg: "Log into spine gateway VM on {{ spine_external_port.address }}"

- hosts: rack1
  gather_facts: false
  become: yes

  tasks:
    - name: Load variables
      ansible.builtin.include_vars: vars.yaml

    - name: Enable IPv4 routing
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Install FRR
      ansible.builtin.package:
        name: frr

    - name: Enable FRR
      ansible.builtin.systemd:
        name: frr
        enabled: yes
        state: started
